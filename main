import sys
import random
from copy import deepcopy
from argparse import ArgumentParser, FileType
from hmm import *
from quick_exp import *
from dependency_parser import read_conll, ArcEagerParser, dp_features, train_dependency_parser, ArcHybridParser, check_projectivity, test_dependency_parser



#============================================================
#                    LOAD TIGER CORPUS
#============================================================

trainset = "./data/german_tiger_train.conll"
testset  = "./data/german_tiger_test.conll"

# Corpus for POS tagger with rich tags
train_rich = read_conll_tagging_data(open(trainset, "r", encoding = "utf8"))
test_rich = read_conll_tagging_data(open(testset, "r", encoding = "utf8"))

# Corpus for POS tagger with universal tags
univ_map = read_map(open('./data/de_tiger.map', 'r', encoding = 'utf8'))
train_univ = list(map_corpus(train_rich, univ_map))
test_univ = list(map_corpus(test_rich, univ_map))

# Corpus for POS tagger with custom tags
cust_map = read_map(open('./data/custom.map', 'r', encoding = 'utf8'))
train_cust = list(map_corpus(train_rich, cust_map))
test_cust = list(map_corpus(test_rich, cust_map))

str = """
Corpus: German Tiger
    train :\t%i sentences
    test  :\t%i sentences
""" % (len(train_rich), len(test_rich))
print(str)


#============================================================
#                   POS TAGGERS TRAINING
#============================================================

# Rich tags
tagger_rich = Tagger()
tagger_rich.train(train_rich)
accur_rich = tagger_rich.test(test_rich)
print("Trained Tagger for rich tags.")

# Universal tags
tagger_univ = Tagger()
tagger_univ.train(train_univ)
accur_univ = tagger_univ.test(test_univ)
print("Trained Tagger for universal tags.")

## Custom tags
tagger_cust = Tagger()
tagger_cust.train(train_cust)
accur_cust = tagger_cust.test(test_cust)
print("Trained Tagger for custom tags.")


#============================================================
#                   INTRINSIC EVALUATION
#============================================================

accur_rich, conf_rich = tagger_rich.test(test_rich)
accur_univ, conf_univ = tagger_univ.test(test_univ)
accur_cust, conf_cust = tagger_cust.test(test_cust)

str = """
Intrinsic evaluation:
    rich      :\t%0.2f %%
    universal :\t%0.2f %%
    custom    :\t%0.2f %%
""" % (accur_rich*100, accur_univ*100, accur_cust*100)
print(str)


#============================================================
#                   EXTRINSIC EVALUATION
#============================================================

exit()

n_epoch = 5

accur_rich = 0
accur_univ = 0
accur_cust = 0
accur_pred = 0

train, dev, test = [filter_non_projective(c) for c in get_tiger_corpus_data()]

# Parser using rich tags
print("\nTraining dependency parser with rich tags")
parser = ArcEagerParser(dp_features)
train_dependency_parser(parser, train, dev, n_epoch)
accur_rich = test_dependency_parser(parser, test)


# Parser using universal tags
print("\nTraining dependency parser with universal tags")
train2, dev2, test2 = [filter_non_projective(c) for c in get_universal_treebank_data('de')]
parser = ArcEagerParser(dp_features)
train_dependency_parser(parser, train2, dev2, n_epoch)
accur_univ = test_dependency_parser(parser, test2)


# Parser using custom tags
print("\nTraining dependency parser with custom tags")
train3, dev3, test3 = [map_conll_corpus(c, cust_map) for c in [train, dev, test]]
parser = ArcEagerParser(dp_features)
train_dependency_parser(parser, train3, dev3, n_epoch)
accur_cust = test_dependency_parser(parser, test3)


# Parser using POS tagger with rich tags
print("\nTraining dependency parser with predicted tags")
train4, dev4, test4 = [predicted_conll_corpus(c, tagger_cust) for c in [train, dev, test]]
parser = ArcEagerParser(dp_features)
train_dependency_parser(parser, train4, dev4, n_epoch)
accur_pred = test_dependency_parser(parser, test4)
print("Trained dependency parser with custom tags")


str = """
Extrinsic evaluation:
    rich       :\t%0.2f %%
    universal  :\t%0.2f %%
    custom     :\t%0.2f %%
    prediction :\t%0.2f %%
""" % (accur_rich*100, accur_univ*100, accur_cust*100, accur_pred*100)
print(str)

# vim: set filetype=python:
